generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  password      String
  role          UserRole       @default(USER)
  status        UserStatus     @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdGames  Game[]
  participants  Participant[]
  activities    Activity[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Game {
  id             String        @id @default(cuid())
  title          String
  description    String
  location       String // e.g., "Africa", "Europe", "Asia"
  status         GameStatus    @default(PENDING)
  launchDate     DateTime?
  region         String? // Geographic region for geolocation matching
  minLatitude    Float? // Bounding box for geolocation
  maxLatitude    Float?
  minLongitude   Float?
  maxLongitude   Float?
  totalLevels    Int           @default(12) // Total levels (12 as specified)
  stagesPerLevel Int           @default(4) // Stages per level (4 as specified)
  cluesPerStage  Int           @default(4) // Clues per stage (4 as specified)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  creatorId      String
  creator        User          @relation(fields: [creatorId], references: [id])
  levels         Level[]
  participants   Participant[]
  clueSets       ClueSet[] // Geolocation-based clue sets

  @@index([creatorId], map: "games_creatorId_fkey")
  @@map("games")
}

model Level {
  id          String   @id @default(cuid())
  levelNumber Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gameId      String
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  stages      Stage[]

  @@unique([gameId, levelNumber])
  @@map("levels")
}

model Stage {
  id                  String                @id @default(cuid())
  stageNumber         Int
  name                String
  description         String?
  requiredStones      Int                   @default(0) // Scavenger stones required to advance
  requiredPebbles     Int                   @default(0) // Keep for backward compatibility
  badgeImage          String?
  badgeName           String? // Name for the stage badge
  badgeDescription    String? // Description for the stage badge
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  levelId             String
  hunts               Hunt[]
  participantProgress ParticipantProgress[]
  level               Level                 @relation(fields: [levelId], references: [id], onDelete: Cascade)

  @@unique([levelId, stageNumber])
  @@map("stages")
}

model Hunt {
  id          String   @id @default(cuid())
  huntNumber  Int
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stageId     String
  clueSetId   String? // Optional link to clue set for geolocation
  clues       Clue[]
  stage       Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  clueSet     ClueSet? @relation(fields: [clueSetId], references: [id])

  @@unique([stageId, huntNumber])
  @@index([clueSetId])
  @@map("hunts")
}

model Clue {
  id                String           @id @default(cuid())
  clueNumber        Int
  question          String
  hint              String?
  answer            String?
  type              ClueType
  isActive          Boolean          @default(true)
  aiGenerated       Boolean          @default(false) // Was this clue generated by AI?
  requiredLatitude  Float? // Required location for clue generation
  requiredLongitude Float? // Required location for clue generation
  locationRadius    Float? // Radius in meters for location matching
  aiContext         Json? // Context used for AI generation
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  huntId            String
  submissions       ClueSubmission[]
  hunt              Hunt             @relation(fields: [huntId], references: [id], onDelete: Cascade)

  @@unique([huntId, clueNumber])
  @@map("clues")
}

model Participant {
  id                 String                @id @default(cuid())
  status             ParticipantStatus     @default(ACTIVE)
  pebbles            Int                   @default(1000) // Starting pebbles for Level 1 Stage 1
  scavengerStones    Int                   @default(0) // Scavenger stones for advancement
  currentLatitude    Float? // Current geolocation
  currentLongitude   Float? // Current geolocation
  lastLocationUpdate DateTime? // Last time location was updated
  joinedAt           DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  userId             String
  gameId             String
  clueSetId          String? // Current assigned clue set
  submissions        ClueSubmission[]
  progress           ParticipantProgress[]
  game               Game                  @relation(fields: [gameId], references: [id])
  user               User                  @relation(fields: [userId], references: [id])
  clueSet            ClueSet?              @relation(fields: [clueSetId], references: [id])
  wallet             Wallet?

  @@unique([userId, gameId])
  @@index([gameId], map: "participants_gameId_fkey")
  @@index([clueSetId])
  @@map("participants")
}

model Wallet {
  id            String        @id @default(cuid())
  balance       Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  participantId String        @unique
  transactions  Transaction[]
  participant   Participant   @relation(fields: [participantId], references: [id])

  @@map("wallets")
}

model Transaction {
  id          String   @id @default(cuid())
  amount      Int
  type        String
  description String
  createdAt   DateTime @default(now())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])

  @@index([walletId], map: "transactions_walletId_fkey")
  @@map("transactions")
}

model ParticipantProgress {
  id                     String      @id @default(cuid())
  currentLevel           Int         @default(1)
  currentStage           Int         @default(1)
  currentHunt            Int         @default(1)
  currentClue            Int         @default(1)
  isStageCompleted       Boolean     @default(false) // Current stage completion status
  isLevelCompleted       Boolean     @default(false) // Current level completion status
  stagesCompletedInLevel Int         @default(0) // How many stages completed in current level
  canAdvanceToNextStage  Boolean     @default(false) // Has required stones to advance
  canAdvanceToNextLevel  Boolean     @default(false) // Has completed all stages in level
  completedAt            DateTime?
  lastLocation           Json? // Last known geolocation
  lastLocationValid      Boolean     @default(false) // Is participant in valid game region?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  participantId          String
  stageId                String
  badges                 Badge[]
  participant            Participant @relation(fields: [participantId], references: [id])
  stage                  Stage       @relation(fields: [stageId], references: [id])

  @@unique([participantId, stageId])
  @@index([stageId], map: "participant_progress_stageId_fkey")
  @@map("participant_progress")
}

model Badge {
  id          String              @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  badgeType   BadgeType // STAGE or LEVEL
  levelNumber Int // Which level this badge belongs to
  stageNumber Int? // Which stage (null for level badges)
  isAvailable Boolean             @default(true) // Can be merged into level badge
  earnedAt    DateTime            @default(now())
  mergedAt    DateTime? // When stage badges were merged into level badge
  progressId  String
  progress    ParticipantProgress @relation(fields: [progressId], references: [id])

  @@index([progressId], map: "badges_progressId_fkey")
  @@map("badges")
}

model ClueSet {
  id              String        @id @default(cuid())
  name            String // e.g., "Marion District Set", "Marina River Set"
  description     String?
  centerLatitude  Float // Center point of the clue set
  centerLongitude Float // Center point of the clue set
  radiusKm        Float         @default(16.09344) // 10 miles in kilometers
  minLatitude     Float // Bounding box for fast lookup
  maxLatitude     Float
  minLongitude    Float
  maxLongitude    Float
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  gameId          String
  game            Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  hunts           Hunt[] // Hunts that belong to this clue set
  participants    Participant[] // Participants assigned to this clue set

  @@index([gameId])
  @@index([centerLatitude, centerLongitude])
  @@index([minLatitude, maxLatitude, minLongitude, maxLongitude])
  @@map("clue_sets")
}

model ClueSubmission {
  id             String      @id @default(cuid())
  submissionType String
  textAnswer     String?
  photoUrl       String?
  location       Json?
  isCorrect      Boolean     @default(false)
  aiAnalysis     String?
  submittedAt    DateTime    @default(now())
  participantId  String
  clueId         String
  clue           Clue        @relation(fields: [clueId], references: [id])
  participant    Participant @relation(fields: [participantId], references: [id])

  @@index([clueId], map: "clue_submissions_clueId_fkey")
  @@index([participantId], map: "clue_submissions_participantId_fkey")
  @@map("clue_submissions")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  details     Json?
  createdAt   DateTime     @default(now())
  userId      String
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId], map: "activities_userId_fkey")
  @@index([createdAt])
  @@map("activities")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum GameStatus {
  PENDING
  UPCOMING
  ACTIVE
  COMPLETED
}

enum UserStatus {
  ACTIVE
  BANNED
}

enum ParticipantStatus {
  ACTIVE
  BANNED
}

enum ClueType {
  TEXT_ANSWER
  PHOTO_UPLOAD
  COMBINED
}

enum ActivityType {
  GAME_CREATED
  GAME_UPDATED
  GAME_DELETED
  GAME_REGISTERED
  USER_REGISTERED
  USER_UPDATED
  USER_LOGIN
  USER_LOGOUT
  USER_BANNED
  USER_UNBANNED
  TOKEN_REFRESH
}

enum BadgeType {
  STAGE
  LEVEL
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique @db.VarChar(500)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  @@index([userId])
  @@map("refresh_tokens")
}
